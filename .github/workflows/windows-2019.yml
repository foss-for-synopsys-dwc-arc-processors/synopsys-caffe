name: windows-2019

on:
  push:
    branches: [ windows-2019 ]
  pull_request:
    branches: [ windows-2019 ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # pin to windows-2019
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
        architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    
    - name: vcpkg
      run: set PATH=%VCPKG_INSTALLATION_ROOT%;%PATH%
      shell: cmd
      
    - name: vcpkg integrate install
      run: vcpkg integrate install
      
    - name: vcpkg install
      run: vcpkg install lmdb gflags glog leveldb snappy protobuf hdf5 opencv3[contrib,nonfree,world] openblas zlib libjpeg-turbo python3 boost boost-python[python3] --triplet x64-windows
      


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B --debug-output ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DUSE_LMDB=1 

    - name: Build this project
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DUSE_LMDB=1
